{"version":3,"sources":["component/Helpers.jsx","component/SetForm.jsx","component/RegisterPage.jsx","component/LoginPage.jsx","App.js","serviceWorker.js","index.js"],"names":["DatePickerField","name","value","onChange","active","selected","Date","val","dateFormat","disabled","peekNextMonth","showMonthDropdown","showYearDropdown","dropdownMode","placeholderText","register","newUser","a","setDate","birthdate","formatDate","data","firstName","lastName","email","phone","gender","axios","post","link","api","errText","validator","Yup","required","matches","dt","day","getDate","month_index","getMonth","year","getFullYear","form","formik","process","errMessage","load","handleSubmit","handleChange","handleBlur","values","errors","setFieldValue","touched","setFormGroup","dtVal","dtTouch","dtError","nameTxt","holder","Form","Group","Control","id","type","placeholder","onBlur","isInvalid","error","show","Feedback","showError","Fragment","Card","body","Alert","variant","showAlert","className","onSubmit","Row","as","Col","md","Check","label","checked","Button","size","block","Spinner","animation","SignupForm","useState","setProcess","setError","btnload","setBtnload","success","setSuccess","useFormik","initialValues","validationSchema","signup","code","status","Container","SetForm","Jumbotron","Link","to","LoginPage","App","exact","path","component","Signup","SignIn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bf699845.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport * as Yup from 'yup';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport const DatePickerField = ({ name, value, onChange, active }) => {\r\n    return (\r\n        <DatePicker\r\n            selected={(value && new Date(value)) || null}\r\n            onChange={val => { onChange(name, val) }}\r\n            dateFormat=\"dd MMMM yyyy\" \r\n            disabled={ active === true ? true : false }\r\n            peekNextMonth\r\n            showMonthDropdown\r\n            showYearDropdown\r\n            dropdownMode=\"select\"\r\n            placeholderText=\"Date of Birth\"\r\n        />\r\n    );\r\n};\r\n\r\nexport const register = async (newUser) => {\r\n    const setDate = newUser.birthdate === '' ? '' : formatDate(newUser.birthdate);\r\n    const data = {\r\n        firstName: newUser.firstName,\r\n        lastName: newUser.lastName,\r\n        email: newUser.email,\r\n        phone: newUser.phone,\r\n        birthdate: setDate,\r\n        gender: newUser.gender\r\n    }\r\n    const link = 'https://us-central1-mt-test-42640.cloudfunctions.net/app/'\r\n    const api = await axios.post(link + 'users', data)\r\n    return api.data;\r\n}\r\n\r\nconst errText = {\r\n    required: ' is required',\r\n    phoneRegID: /^(^\\+62\\s?|^0)(\\d{3,4}-?){2}\\d{3,4}$/g,\r\n    phoneValidtxt: 'please enter a valid Indonesian phone number',\r\n    mailtxt: 'please enter a valid email',\r\n}\r\nexport const validator  = Yup.object({\r\n    firstName: Yup.string().required('first name' + errText.required),\r\n    lastName: Yup.string().required('last name' + errText.required),\r\n\r\n    email: Yup.string()\r\n    .email(errText.mailtxt)\r\n    .required('email' + errText.required),\r\n\r\n    phone: Yup.string()\r\n    .required('phone number' + errText.required)\r\n    .matches(errText.phoneRegID, errText.phoneValidtxt)\r\n})\r\n\r\nconst formatDate = (dt) => {\r\n    var month_names =[\"January\",\"February\",\"March\",\r\n                      \"April\",\"May\",\"June\",\r\n                      \"July\",\"August\",\"September\",\r\n                      \"October\",\"November\",\"December\"];\r\n    \r\n    var day = dt.getDate();\r\n    var month_index = dt.getMonth();\r\n    var year = dt.getFullYear();\r\n    \r\n    return \"\" + day + \" \" + month_names[month_index] + \" \" + year;\r\n}","import React from 'react';\r\nimport { Form, Button, Card, Col, Spinner, Alert } from 'react-bootstrap';\r\nimport { DatePickerField } from './Helpers';\r\nimport './styles.scss';\r\n\r\nconst form = ({formik, process, errMessage, load}) => {\r\n\tconst { handleSubmit, handleChange, handleBlur, \r\n\t\t\tvalues, errors, setFieldValue, touched } = formik;\r\n\r\n\tconst showError = (touched, error) => {\r\n\t\tlet show = null;\r\n\t\tif (touched && error) {\r\n\t\t\tshow = <Form.Control.Feedback type=\"invalid\">{ error }</Form.Control.Feedback>\r\n\t\t}\r\n\t\treturn show\r\n\t}\r\n\r\n\tconst setFormGroup = (dtVal, dtTouch, dtError, nameTxt, holder) => {\r\n\t\treturn (\r\n\t\t\t<Form.Group>\r\n\t\t\t\t<Form.Control id={nameTxt} name={nameTxt} type=\"text\" placeholder={holder}\r\n\t\t\t\t\tonBlur={handleBlur} onChange={handleChange} value={dtVal} \r\n\t\t\t\t\tdisabled={ process === true ? true : false }\r\n\t\t\t\t\tisInvalid={ dtTouch && dtError ? true : false } />\r\n\t\t\t\t{ showError(dtTouch, dtError) }\r\n\t\t\t</Form.Group>\r\n\t\t)\r\n\t}\r\n\r\n\tconst showAlert = () => {\r\n\t\tif (errMessage) {\r\n\t\t\treturn <Alert variant=\"danger\">{ errMessage }</Alert>\r\n\t\t}\r\n\t}\r\n\t\t\t\r\n    return (\r\n\t\t<React.Fragment>\r\n\t\t\t<Card body>\r\n\t\t\t\t{ showAlert() }\r\n\t\t\t\t<h1 className={ process === true ? 'disabled' : '' }>Registration</h1>\r\n\t\t\t\t<Form onSubmit={handleSubmit}>\r\n\t\t\t\t\t{ setFormGroup(values.phone, touched.phone, errors.phone, 'phone', 'Mobile Number') }\r\n\t\t\t\t\t{ setFormGroup(values.firstName, touched.firstName, errors.firstName, 'firstName', 'First Name') }\r\n\t\t\t\t\t{ setFormGroup(values.lastName, touched.lastName, errors.lastName, 'lastName', 'Last Name') }\r\n\r\n\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t<Form.Group as={Col} md=\"5\">\r\n\t\t\t\t\t\t\t<DatePickerField name=\"birthdate\" value={values.birthdate} \r\n\t\t\t\t\t\t\t\tonChange={setFieldValue} active={process} />\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<div className=\"gender\">\r\n\t\t\t\t\t\t\t<Form.Check type=\"radio\" name=\"gender\" label=\"Male\"\r\n\t\t\t\t\t\t\t\tid=\"male\" value='male'\r\n\t\t\t\t\t\t\t\tdisabled={ process === true ? true : false }\r\n\t\t\t\t\t\t\t\tonChange={ handleChange }\r\n\t\t\t\t\t\t\t\tchecked={values.gender === \"male\"}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"gender\">\r\n\t\t\t\t\t\t\t<Form.Check type=\"radio\" name=\"gender\" label=\"Female\"\r\n\t\t\t\t\t\t\t\tid=\"female\" value='female'\r\n\t\t\t\t\t\t\t\tdisabled={ process === true ? true : false }\r\n\t\t\t\t\t\t\t\tonChange={ handleChange }\r\n\t\t\t\t\t\t\t\tchecked={values.gender === \"female\"}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Form.Row>\r\n\r\n\t\t\t\t\t{ setFormGroup(values.email, touched.email, errors.email, 'email', 'Email') }\r\n\r\n\t\t\t\t\t<Button type=\"submit\" size=\"lg\" block\r\n\t\t\t\t\t\tdisabled={ process === true ? true : false } >\r\n\t\t\t\t\t\t{ load === true ? <Spinner animation=\"grow\" /> : \"Register\" }\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form>\r\n\t\t\t</Card>\r\n\t\t</React.Fragment>\r\n    )\r\n}\r\n\r\nexport default form;","import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport SetForm from './SetForm';\r\nimport { register, validator } from './Helpers';\r\nimport { Jumbotron, Container, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SignupForm = () => {\r\n\tlet [process, setProcess] = useState(false);\r\n\tlet [error, setError] = useState(null);\r\n\tlet [btnload, setBtnload] = useState(false);\r\n\tlet [success, setSuccess] = useState(false);\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tphone: '',\r\n\t\t\tfirstName: '',\r\n\t\t\tlastName: '',\r\n\t\t\tbirthdate: '',\r\n\t\t\tgender: 'male',\r\n\t\t\temail: '',\r\n\t\t},\r\n\t\tvalidationSchema: validator,\r\n\t\tonSubmit: async (values) => {\r\n\t\t\tsetProcess(true)\r\n\t\t\tsetBtnload(true)\r\n\t\t\tsetError(null)\r\n\t\t\tlet signup = await register(values);\r\n\t\t\tif (signup) {\r\n\t\t\t\tif (signup.code !== 200) {\r\n\t\t\t\t\tsetProcess(false)\r\n\t\t\t\t\tsetBtnload(false)\r\n\t\t\t\t\tsetError(signup.status)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetError(null)\r\n\t\t\t\t\tsetBtnload(false)\r\n\t\t\t\t\tsetSuccess(true)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tconst setLogin = () => {\r\n\t\tif (success) {\r\n\t\t\treturn <Button as={ Link } to=\"/login\" size=\"lg\" block>Login</Button>\r\n\t\t} else {\r\n\t\t\treturn <h1>Footer</h1>;\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<SetForm formik={ formik } process={ process } errMessage={ error } load={ btnload } />\r\n\t\t\t<Jumbotron className={ process === true ? 'disabled' : '' }>\r\n\t\t\t\t{ setLogin() }\r\n\t\t\t</Jumbotron>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default SignupForm;","import React from 'react';\r\nimport { Container, Form, Card, Button } from 'react-bootstrap';\r\nimport './styles.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction LoginPage() {\r\n    return (\r\n        <Container>\r\n\t\t\t<Card body>\r\n                <h1>Login</h1>\r\n\t\t\t\t<Form>\r\n                    <Form.Group>\r\n                        <Form.Control name=\"email\" type=\"text\" placeholder=\"email\" />\r\n                    </Form.Group>\r\n\t\t\t\t\t<Button size=\"lg\" block >Login</Button>\r\n                    <Link to=\"/\">&#8592; back to register</Link>\r\n                </Form>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Signup from './component/RegisterPage';\nimport SignIn from './component/LoginPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\" component={ Signup } />\n        <Route path=\"/login\" component={ SignIn } />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}